package co.vividhata.accessibility_api.checker.issue_checkers;

import co.vividhata.accessibility_api.checker.IIssueChecker;
import co.vividhata.accessibility_api.model.Issue;
import co.vividhata.accessibility_api.model.IssueType;
import co.vividhata.accessibility_api.util.INodeParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import com.github.pemistahl.lingua.api.*;

import java.util.List;
import java.util.ArrayList;

@Service
public class LabelandInstructionChecker implements IIssueChecker {
    private static final IssueType ISSUE_TYPE = IssueType.LABELS_OR_INSTRUCTIONS_UNCLEAR;

    @Autowired
    private INodeParser nodeParser;

    @Override
    public List<Issue> check(Document document) {
        List<Issue> issues = new ArrayList<>();

        String[] tagsToCheck = {"input", "textarea", "select"};

        for (String tag : tagsToCheck) {
            NodeList nodeList = document.getElementsByTagName(tag);

            for (int i = 0; i < nodeList.getLength(); i++) {
                Element element - (Element) nodeList.item(i);
                
                String id = element.getAttribute("id");
                String placeholder = element.getAttribute("placeholder");
                String ariaLabel = element.getAttribute("aria-label");
                String ariaLabelledBy = element.getAttribute("aria-labelledby");

                boolean hasLabel = false;
                if (id != null && !id.isEmpty()) {
                    NodeList labels = document.getElementsByTagName("label");
                    for (int j = 0; j < labels.getLength(); j++) {
                        Element label = (Element) labels.item(j);
                        if (id.equals(label.getAttribute("for"))) {
                            hasLabel = true;
                            break;
                        }
                    }
                }
                if (!hasLabel && (placeholder == null || placeholder.isEmpty()) &&
                    (ariaLabel == null || ariaLabel.isEmpty()) &&
                    (ariaLabelledBy == null || ariaLabelledBy.isEmpty())) {
                    issues.add(new Issue(-1, -1, ISSUE_TYPE, nodeParser.nodeToHtml(element)));
                }
            }
        }

        return issues;
    }
}